/*
	Prim's minimum spanning tree implementation
*/

// BEGIN C++

	map<pi,bool> seen;
	set<pi> q;
	q.insert( mp(0,0)) );
	while( !q.empty() )
	{
		int v = (*q.begin()).second;
		q.erase(q.begin());
		if( !seen[v] )
		{
			seen[v] = true;
			// add neighbors of v
			for( int c = 0; c < n; c++ ) q.insert( mp(d[v][c]), c );
		}
	}

// END C++
