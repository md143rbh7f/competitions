/*
	Implementation of union-find or disjoint-set-union data structure.
	Based on Bruce Merry's implementation.
*/

// BEGIN JAVA

	int[] parent;
	{
		for( int i = 0; i < parent.length; i++ ) parent[i] = -1;
	}

	int find( int[] parent, int x )
	{
		int ptr = x;
		while( parent[ptr] > -1 ) ptr = parent[ptr];
		while( x != ptr )
		{
			int old = x;
			x = parent[x];
			parent[old] = ptr;
		}
		return ptr;
	}

	void merge( int[] parent, int x, int y )
	{
		x = find( parent, x ); y = find( parent, y );
		if( x != y )
		{
			if( parent[x] > parent[y] )
			{
				int temp = x;
				x = y;
				y = temp;
			}
			parent[x] += parent[y];
			parent[y] = x;
		}
	}

// END JAVA

// BEGIN C++

int find( int x )
{
	int y = x;
	while( p[y] >= 0 ) y = p[y];
	while( p[x] >= 0 )
	{
		int tmp = x;
		x = p[x];
		p[tmp] = y;
	}
	return y;
}

void merge( int x, int y )
{
	int a = find(x), b = find(y);
	if( a == b ) return;
	if( p[a] > p[b] ) a ^= b, b ^= a, a ^= b;
	p[a] += p[b];
	p[b] = a;
}

// END C++
